# pos_x, pos_yでなくてstart_s, start_t, end_s, end_tとするのは区間指定・重複対応のため。
# s,tは求めづらいのでrvizで可視化できると良い。

#----------
# planning/control evaluator側
# Decision
name: aeb  # crosswalk, obstacle_cruise_planner....
  - key: decision
    value: 'deceleration' #  'deceleration', 'none'

name: crosswalk
  - key: decision
    value: 'none' # 複数ある場合は一番近いの計算して送る

name: ... # その他色んなモジュールがdecisionを出す。

# 現在のvel, acc, jerkもだす
# planning/control evaluatorどちらから出すべき
name: kinematic_state
  - key: vel
    value:
  - key: acc
    value:
  - key: jerk
    value:
#----------

#----------
# シナリオ側
  Conditions:
    Hertz: 10.0 # metricsが何Hzで来るか。 (現在時刻-評価開始時刻)* Hertz * AllowableRate(=0.95)以上条件に合致するtopicが出力される必要がある。低レートは弾かれる。AllowableRateは一旦固定
    DecelerationConditions: # decisionが'deceleration'のものについて、これらのConditionsでの評価の対象になる
      autonomous_emergency_braking: # module
      # 一瞬少しでも減速すれば良い場合。
      - start_lane_id: 100
        start_s: 1.0
        start_t: 0.0
        end_lane_id: 101
        end_s: 3.0
        end_t: 3.0
        condition_type: any_of # start-endのいずれかの区間で満たせばよい。
        DetailedConditions: null # optional. 何も指定しないと減速しているかをdriving log replayer側で判定。指定する場合はそれの制約内かを判定。
      # 一定速度まで減速する必要がある場合。一つのモジュールで複数の範囲で指定可能
      - start_lane_id: 200
        start_s: 5.0
        start_t: 0.0
        end_lane_id: 201
        end_s: 10.0
        end_d: 0.0
        condition_type: any_of
        DetailedConditions:
          vel_min: 0.0
          vel_max: 1.0
      # planningもcontrolとまとめる?
      # crosswalkの場合は停止計画なので速度を指定する
      crosswalk:
      - start_lane_id: 100
        start_s: 1.0
        start_t: 0.0
        end_lane_id: 101
        end_s: 3.0
        end_t: 3.0
        condition_type: any_of
        DetailedConditions:
          vel_min: 0.0
          vel_max: 0.1
      - start_lane_id: 200
        start_s: 5.0
        start_t: 0.0
        end_lane_id: 201
        end_s: 10.0
        end_t: 0.0
        condition_type: any_of
        DetailedConditions:
          vel_min: 0.0
          vel_max: 0.1
      # slowdownの例 指定区間全てで減速している必要がある
      obstacle_cruise_planner:
      - start_lane_id: 100
        start_s: 1.0
        start_t: 0.0
        end_lane_id: 101
        end_s: 3.0
        end_t: 3.0
        condition_type: all_of # start-endの全ての区間で満たす
        DetailedConditions:
          vel_min: 1.0
          vel_max: 5.0
          acc_min: -1.0
          acc_max: 0
          jerk_min: -0.5
          jerk_max: -0
#----------

# 室岡初期案
#https://github.com/tier4/driving_log_replayer/commit/89b0e3441211f6777c44d43604cfc08b75f2c80d

# 現実装
# https://github.com/tier4/driving_log_replayer/pull/464/files
  Conditions:
    Hertz: 10.0 # metricsが何Hzで来るか。 (現在時刻-評価開始時刻)* Hertz * AllowableRate(=0.95)以上条件に合致するtopicが出力される必要がある。低レートは弾かれる。AllowableRateは一旦固定
    ControlConditions:
      - TimeRange: { start: 1709009638.3, end: 1709009639.3 } # 評価開始時間と終了時刻、endは省略可能で省略した場合はsys.float_info.max
        Module: "autonomous_emergency_braking: aeb_emergency_stop" # 評価対象のモジュール
        Value0Key: decision # 評価対象のキー
        Value0Value: stop # 評価対象の値
        DetailedConditions: null # 位置、速度など、追加で判定したい条件。nullの場合はValue0Valueが一致した時点で成功。記載がある場合はDetailedConditionsも条件を満たす必要がある
      - TimeRange: { start: 1709009640, end: 1709009641 }
        Module: "autonomous_emergency_braking: aeb_emergency_stop"
        Value0Key: decision
        Value0Value: none
        DetailedConditions: null
      - TimeRange: { start: 1709009640, end: 1709009641 }
        Module: crosswalk
        Value0Key: decision
        Value0Value: slow_down
        DetailedConditions:
          pos_x: { lower: 1.0, upper: 2.0 }
          pos_y: { lower: 3.0, upper: 4.0 }
          vel: { lower: 3.0, upper: 4.0 }

