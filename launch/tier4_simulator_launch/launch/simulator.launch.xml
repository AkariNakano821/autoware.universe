<launch>
  <!-- Parameter files -->
  <arg name="fault_injection_param_path"/>
  <arg name="obstacle_segmentation_ground_segmentation_elevation_map_param_path"/>
  <arg name="pose_initializer_param_path"/>

  <arg name="launch_dummy_perception"/>
  <arg name="launch_dummy_vehicle"/>
  <arg name="launch_dummy_localization"/>
  <arg name="launch_diagnostic_converter"/>
  <arg name="vehicle_info_param_file"/>

  <arg name="perception/enable_elevation_map" default="false" description="enable elevation map loader"/>
  <arg name="perception/use_base_link_z" default="true" description="dummy perception uses base_link z axis coordinate if it is true"/>
  <arg name="sensing/visible_range" default="300.0" description="visible range when using dummy perception"/>

  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="initial_engage_state" default="true" description="/vehicle/engage state after starting Autoware"/>

  <let name="vehicle_model_pkg" value="$(find-pkg-share $(var vehicle_model)_description)"/>

  <group if="$(var scenario_simulation)">
    <include file="$(find-pkg-share fault_injection)/launch/fault_injection.launch.xml">
      <arg name="config_file" value="$(var fault_injection_param_path)"/>
    </include>
  </group>

  <!-- Dummy Perception -->
  <group if="$(var launch_dummy_perception)">
    <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
      <arg name="real" value="false"/>
      <arg name="use_object_recognition" value="false"/>
      <arg name="use_base_link_z" value="$(var perception/use_base_link_z)"/>
      <arg name="visible_range" value="$(var sensing/visible_range)"/>
    </include>
  </group>
  <group unless="$(var scenario_simulation)">
    <!-- Occupancy Grid -->
    <push-ros-namespace namespace="occupancy_grid_map"/>
    <executable name="publish_empty_occupancy_grid" shell="true" cmd="ros2 topic pub /perception/occupancy_grid_map/map nav_msgs/msg/OccupancyGrid &quot;'{header: {frame_id: map}, info: {width: 1, height: 1, resolution: 0.5}, data: [1]}'&quot;"/>
  </group>

  <!-- perception module -->
  <group>
    <push-ros-namespace namespace="perception"/>
	<executable name="publish_empty_objects" shell="true" cmd="ros2 topic pub /perception/object_recognition/objects autoware_auto_perception_msgs/msg/PredictedObjects &quot;'{header: {frame_id: map}}'&quot; --rate 10"/>

    <group if="$(var perception/enable_elevation_map)">
      <push-ros-namespace namespace="obstacle_segmentation/elevation_map"/>
      <node pkg="elevation_map_loader" exec="elevation_map_loader" name="elevation_map_loader" output="screen">
        <remap from="output/elevation_map" to="map"/>
        <remap from="input/pointcloud_map" to="/map/pointcloud_map"/>
        <remap from="input/vector_map" to="/map/vector_map"/>
        <param name="use_lane_filter" value="false"/>
        <param name="use_inpaint" value="true"/>
        <param name="inpaint_radius" value="1.0"/>
        <param name="param_file_path" value="$(var obstacle_segmentation_ground_segmentation_elevation_map_param_path)"/>
        <param name="elevation_map_directory" value="$(find-pkg-share elevation_map_loader)/data/elevation_maps"/>
        <param name="use_elevation_map_cloud_publisher" value="false"/>
      </node>
    </group>

  </group>

  <!-- Dummy localization -->
  <group if="$(var launch_dummy_localization)">
    <include file="$(find-pkg-share pose_initializer)/launch/pose_initializer.launch.xml">
      <arg name="ndt_enabled" value="false"/>
      <arg name="gnss_enabled" value="false"/>
      <arg name="ekf_enabled" value="false"/>
      <arg name="yabloc_enabled" value="false"/>
      <arg name="stop_check_enabled" value="false"/>
      <arg name="config_file" value="$(var pose_initializer_param_path)"/>
    </include>
  </group>

  <!-- Diagnostic Converter -->
  <group if="$(var launch_diagnostic_converter)">
    <node name="diagnostic_converter" exec="diagnostic_converter" pkg="diagnostic_converter" output="screen">
      <param name="diagnostic_topics" value="[/diagnostic/planning_evaluator/metrics, /diagnostics_err]"/>
    </node>
  </group>

  <!-- Simulator model -->
  <group if="$(var launch_dummy_vehicle)">
    <arg name="simulator_model" default="$(var vehicle_model_pkg)/config/simulator_model.param.yaml" description="path to the file of simulator model"/>
    <include file="$(find-pkg-share simple_planning_simulator)/launch/simple_planning_simulator.launch.py">
      <arg name="vehicle_info_param_file" value="$(var vehicle_info_param_file)"/>
      <arg name="simulator_model_param_file" value="$(var simulator_model)"/>
      <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
    </include>
  </group>
</launch>
