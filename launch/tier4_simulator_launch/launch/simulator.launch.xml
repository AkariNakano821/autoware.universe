<launch>
  <!-- Parameter files -->
  <arg name="fault_injection_param_path"/>
  <arg name="obstacle_segmentation_ground_segmentation_elevation_map_param_path"/>
  <arg name="laserscan_based_occupancy_grid_map_param_path"/>
  <arg name="occupancy_grid_map_updater"/>
  <arg name="occupancy_grid_map_updater_param_path"/>
  <arg name="pose_initializer_param_path"/>

  <arg name="launch_dummy_perception"/>
  <arg name="launch_dummy_vehicle"/>
  <arg name="launch_dummy_localization"/>
  <arg name="launch_diagnostic_converter"/>
  <arg name="vehicle_info_param_file"/>

  <arg name="perception/enable_detection_failure" default="true" description="enable to simulate detection failure when using dummy perception"/>
  <arg name="perception/enable_object_recognition" default="false" description="enable object recognition"/>
  <arg name="perception/enable_elevation_map" default="false" description="enable elevation map loader"/>
  <arg name="perception/enable_traffic_light" default="true" description="enable traffic light"/>
  <arg name="fusion_only" default="true" description="enable only camera and V2X fusion when enabling traffic light"/>
  <arg name="perception/use_base_link_z" default="true" description="dummy perception uses base_link z axis coordinate if it is true"/>
  <arg name="sensing/visible_range" default="300.0" description="visible range when using dummy perception"/>

  <arg name="vehicle_model" description="vehicle model name"/>
  <arg name="initial_engage_state" default="true" description="/vehicle/engage state after starting Autoware"/>

  <let name="vehicle_model_pkg" value="$(find-pkg-share $(var vehicle_model)_description)"/>

  <group if="$(var scenario_simulation)">
    <include file="$(find-pkg-share fault_injection)/launch/fault_injection.launch.xml">
      <arg name="config_file" value="$(var fault_injection_param_path)"/>
    </include>
  </group>

  <!-- Dummy Perception -->
  <group if="$(var launch_dummy_perception)">
    <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
      <arg name="real" value="$(var perception/enable_detection_failure)"/>
      <arg name="use_object_recognition" value="$(var perception/enable_object_recognition)"/>
      <arg name="use_base_link_z" value="$(var perception/use_base_link_z)"/>
      <arg name="visible_range" value="$(var sensing/visible_range)"/>
    </include>
  </group>

  <!-- Dummy localization -->
  <group if="$(var launch_dummy_localization)">
    <include file="$(find-pkg-share pose_initializer)/launch/pose_initializer.launch.xml">
      <arg name="ndt_enabled" value="false"/>
      <arg name="gnss_enabled" value="false"/>
      <arg name="ekf_enabled" value="false"/>
      <arg name="yabloc_enabled" value="false"/>
      <arg name="stop_check_enabled" value="false"/>
      <arg name="config_file" value="$(var pose_initializer_param_path)"/>
    </include>
  </group>

  <!-- Diagnostic Converter -->
  <group if="$(var launch_diagnostic_converter)">
    <node name="diagnostic_converter" exec="diagnostic_converter" pkg="diagnostic_converter" output="screen">
      <param name="diagnostic_topics" value="[/diagnostic/planning_evaluator/metrics, /diagnostics_err]"/>
    </node>
  </group>

  <!-- Simulator model -->
  <group if="$(var launch_dummy_vehicle)">
    <arg name="simulator_model" default="$(var vehicle_model_pkg)/config/simulator_model.param.yaml" description="path to the file of simulator model"/>
    <include file="$(find-pkg-share simple_planning_simulator)/launch/simple_planning_simulator.launch.py">
      <arg name="vehicle_info_param_file" value="$(var vehicle_info_param_file)"/>
      <arg name="simulator_model_param_file" value="$(var simulator_model)"/>
      <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
    </include>
  </group>
</launch>
