<launch>
  <arg name="enable_image_decompressor" default="true" description="enable image decompressor"/>
  <arg name="enable_fine_detection" default="true" description="enable fine position adjustment of traffic light"/>
  <arg name="fusion_only" default="false" description="launch only occlusion_predictor and multi_camera_fusion"/>
  <arg name="traffic_light_fine_detector_model_path" default="$(find-pkg-share traffic_light_fine_detector)/data" description="fine detector label path"/>
  <arg name="traffic_light_fine_detector_label_name" default="tlr_labels.txt" description="fine detector label filename"/>
  <arg name="traffic_light_fine_detector_model_name" default="tlr_yolox_s_batch_6" description="fine detector onnx model filename"/>
  <arg name="traffic_light_classifier_model_path" default="$(find-pkg-share traffic_light_classifier)/data" description="classifier label path"/>
  <arg name="car_traffic_light_classifier_label_name" default="lamp_labels.txt" description="classifier label filename"/>
  <arg name="pedestrian_traffic_light_classifier_label_name" default="lamp_labels_ped.txt" description="classifier label filename"/>
  <arg name="car_traffic_light_classifier_model_name" default="traffic_light_classifier_mobilenetv2_batch_6.onnx" description="classifier onnx model filename"/>
  <arg name="pedestrian_traffic_light_classifier_model_name" default="ped_traffic_light_classifier_mobilenetv2_batch_6.onnx" description="classifier onnx model filename"/>
  <arg name="input/cloud" default="/sensing/lidar/top/pointcloud_raw" description="point cloud for occlusion prediction"/>
  <arg name="internal/traffic_signals" default="/perception/traffic_light_recognition/internal/traffic_signals"/>
  <arg name="fusion/traffic_signals" default="/perception/traffic_light_recognition/fusion/traffic_signals"/>
  <arg name="external/traffic_signals" default="/perception/traffic_light_recognition/external/traffic_signals"/>
  <arg name="output/traffic_signals" default="/perception/traffic_light_recognition/traffic_signals"/>
  <arg name="use_crosswalk_traffic_light_estimator" default="true" description="output pedestrian's traffic light signals"/>
  <arg name="crosswalk_traffic_light_estimator_param_file" default="$(find-pkg-share crosswalk_traffic_light_estimator)/config/crosswalk_traffic_light_estimator.param.yaml"/>
  <arg name="image_number" default="4" description="choose image raw number(1-4)"/>
  <arg name="camera_namespaces" default="['camera3', 'camera4', 'camera5', 'camera6']"/>
  <arg name="fine_detector_label_path" default="$(var traffic_light_fine_detector_model_path)/$(var traffic_light_fine_detector_label_name)"/>
  <arg name="fine_detector_model_path" default="$(var traffic_light_fine_detector_model_path)/$(var traffic_light_fine_detector_model_name).onnx"/>
  <arg name="car_classifier_label_path" default="$(var traffic_light_classifier_model_path)/$(var car_traffic_light_classifier_label_name)"/>
  <arg name="pedestrian_classifier_label_path" default="$(var traffic_light_classifier_model_path)/$(var pedestrian_traffic_light_classifier_label_name)"/>
  <arg name="car_classifier_model_path" default="$(var traffic_light_classifier_model_path)/$(var car_traffic_light_classifier_model_name).onnx"/>
  <arg name="pedestrian_classifier_model_path" default="$(var traffic_light_classifier_model_path)/$(var pedestrian_traffic_light_classifier_model_name).onnx"/>

  <!--  camera namespace1 -->
  <group if="$(eval '$(var image_number) >= 1')">
    <let name="namespace" value="$(eval 'eval(&quot;$(var camera_namespaces)&quot;)[0]')"/>
    <push-ros-namespace namespace="$(var namespace)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace)/camera_info"/>
    <let name="output/rois" value="/perception/traffic_light_recognition/$(var namespace)/detection/rois"/>
    <let name="output/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/traffic_signals"/>
    <let name="output/car/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/car/traffic_signals"/>
    <let name="output/pedestrian/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/pedestrian/traffic_signals"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="$(var output/rois)" unless="$(var enable_fine_detection)"/>

    <group unless="$(var fusion_only)">
      <node pkg="topic_tools" exec="relay" name="traffic_light_camera_info_relay" args="$(var input/camera_info) camera_info"/>
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
          <arg name="input/camera_info" value="$(var input/camera_info)"/>
          <arg name="min_timestamp_offset" value="-0.3"/>
          <arg name="expect/rois" value="expect/rois"/>
          <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
          <arg name="output/camera_info" value="camera_info"/>
        </include>
      </group>

      <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
        <arg name="input/image" value="$(var input/image)"/>
        <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
        <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
        <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
        <arg name="car_classifier_label_path" value="$(var car_classifier_label_path)"/>
        <arg name="pedestrian_classifier_label_path" value="$(var pedestrian_classifier_label_path)"/>
        <arg name="car_classifier_model_path" value="$(var car_classifier_model_path)"/>
        <arg name="pedestrian_classifier_model_path" value="$(var pedestrian_classifier_model_path)"/>
        <arg name="output/rois" value="$(var output/rois)"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
        <arg name="output/car/traffic_signals" value="$(var output/car/traffic_signals)"/>
        <arg name="output/pedestrian/traffic_signals" value="$(var output/pedestrian/traffic_signals)"/>
      </include>
    </group>

    <group>
      <push-ros-namespace namespace="classification"/>
      <include file="$(find-pkg-share traffic_light_occlusion_predictor)/launch/traffic_light_occlusion_predictor.launch.xml">
        <arg name="input/camera_info" value="$(var input/camera_info)"/>
        <arg name="input/cloud" value="$(var input/cloud)"/>
        <arg name="input/rois" value="$(var output/rois)"/>
        <arg name="input/car/traffic_signals" value="classified/car/traffic_signals"/>
        <arg name="input/pedestrian/traffic_signals" value="classified/pedestrian/traffic_signals"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
      </include>
    </group>
  </group>

  <!--  camera namespace2 -->
  <group if="$(eval '$(var image_number) >= 2')">
    <let name="namespace" value="$(eval 'eval(&quot;$(var camera_namespaces)&quot;)[1]')"/>
    <push-ros-namespace namespace="$(var namespace)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace)/camera_info"/>
    <let name="output/rois" value="/perception/traffic_light_recognition/$(var namespace)/detection/rois"/>
    <let name="output/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/traffic_signals"/>
    <let name="output/car/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/car/traffic_signals"/>
    <let name="output/pedestrian/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/pedestrian/traffic_signals"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="rois" unless="$(var enable_fine_detection)"/>

    <group unless="$(var fusion_only)">
      <node pkg="topic_tools" exec="relay" name="traffic_light_camera_info_relay" args="$(var input/camera_info) camera_info"/>
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
          <arg name="input/camera_info" value="$(var input/camera_info)"/>
          <arg name="min_timestamp_offset" value="-0.04"/>
          <arg name="expect/rois" value="expect/rois"/>
          <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
          <arg name="output/camera_info" value="camera_info"/>
        </include>
      </group>

      <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
        <arg name="input/image" value="$(var input/image)"/>
        <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
        <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
        <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
        <arg name="car_classifier_label_path" value="$(var car_classifier_label_path)"/>
        <arg name="pedestrian_classifier_label_path" value="$(var pedestrian_classifier_label_path)"/>
        <arg name="car_classifier_model_path" value="$(var car_classifier_model_path)"/>
        <arg name="pedestrian_classifier_model_path" value="$(var pedestrian_classifier_model_path)"/>
        <arg name="output/rois" value="$(var output/rois)"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
        <arg name="output/car/traffic_signals" value="$(var output/car/traffic_signals)"/>
        <arg name="output/pedestrian/traffic_signals" value="$(var output/pedestrian/traffic_signals)"/>
      </include>
    </group>

    <group>
      <push-ros-namespace namespace="classification"/>
      <include file="$(find-pkg-share traffic_light_occlusion_predictor)/launch/traffic_light_occlusion_predictor.launch.xml">
        <arg name="input/camera_info" value="$(var input/camera_info)"/>
        <arg name="input/cloud" value="$(var input/cloud)"/>
        <arg name="input/rois" value="$(var output/rois)"/>
        <arg name="input/car/traffic_signals" value="classified/car/traffic_signals"/>
        <arg name="input/pedestrian/traffic_signals" value="classified/pedestrian/traffic_signals"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
      </include>
    </group>
  </group>

  <!--  camera namespace3 -->
  <group if="$(eval '$(var image_number) >= 3')">
    <let name="namespace" value="$(eval 'eval(&quot;$(var camera_namespaces)&quot;)[2]')"/>
    <push-ros-namespace namespace="$(var namespace)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace)/camera_info"/>
    <let name="output/rois" value="/perception/traffic_light_recognition/$(var namespace)/detection/rois"/>
    <let name="output/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/traffic_signals"/>
    <let name="output/car/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/car/traffic_signals"/>
    <let name="output/pedestrian/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/pedestrian/traffic_signals"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="rois" unless="$(var enable_fine_detection)"/>

    <group unless="$(var fusion_only)">
      <node pkg="topic_tools" exec="relay" name="traffic_light_camera_info_relay" args="$(var input/camera_info) camera_info"/>
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
          <arg name="input/camera_info" value="$(var input/camera_info)"/>
          <arg name="min_timestamp_offset" value="-0.04"/>
          <arg name="expect/rois" value="expect/rois"/>
          <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
          <arg name="output/camera_info" value="camera_info"/>
        </include>
      </group>

      <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
        <arg name="input/image" value="$(var input/image)"/>
        <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
        <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
        <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
        <arg name="car_classifier_label_path" value="$(var car_classifier_label_path)"/>
        <arg name="pedestrian_classifier_label_path" value="$(var pedestrian_classifier_label_path)"/>
        <arg name="car_classifier_model_path" value="$(var car_classifier_model_path)"/>
        <arg name="pedestrian_classifier_model_path" value="$(var pedestrian_classifier_model_path)"/>
        <arg name="output/rois" value="$(var output/rois)"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
        <arg name="output/car/traffic_signals" value="$(var output/car/traffic_signals)"/>
        <arg name="output/pedestrian/traffic_signals" value="$(var output/pedestrian/traffic_signals)"/>
      </include>
    </group>

    <group>
      <push-ros-namespace namespace="classification"/>
      <include file="$(find-pkg-share traffic_light_occlusion_predictor)/launch/traffic_light_occlusion_predictor.launch.xml">
        <arg name="input/camera_info" value="$(var input/camera_info)"/>
        <arg name="input/cloud" value="$(var input/cloud)"/>
        <arg name="input/rois" value="$(var output/rois)"/>
        <arg name="input/car/traffic_signals" value="classified/car/traffic_signals"/>
        <arg name="input/pedestrian/traffic_signals" value="classified/pedestrian/traffic_signals"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
      </include>
    </group>
  </group>

  <!--  camera namespace4 -->
  <group if="$(eval '$(var image_number) >= 4')">
    <let name="namespace" value="$(eval 'eval(&quot;$(var camera_namespaces)&quot;)[3]')"/>
    <push-ros-namespace namespace="$(var namespace)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace)/camera_info"/>
    <let name="output/rois" value="/perception/traffic_light_recognition/$(var namespace)/detection/rois"/>
    <let name="output/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/traffic_signals"/>
    <let name="output/car/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/car/traffic_signals"/>
    <let name="output/pedestrian/traffic_signals" value="/perception/traffic_light_recognition/$(var namespace)/classification/pedestrian/traffic_signals"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="rois" unless="$(var enable_fine_detection)"/>

    <group unless="$(var fusion_only)">
      <node pkg="topic_tools" exec="relay" name="traffic_light_camera_info_relay" args="$(var input/camera_info) camera_info"/>
      <group>
        <push-ros-namespace namespace="detection"/>
        <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
          <arg name="input/camera_info" value="$(var input/camera_info)"/>
          <arg name="min_timestamp_offset" value="-0.04"/>
          <arg name="expect/rois" value="expect/rois"/>
          <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
          <arg name="output/camera_info" value="camera_info"/>
        </include>
      </group>

      <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
        <arg name="input/image" value="$(var input/image)"/>
        <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
        <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
        <arg name="use_intra_process" value="true"/>
        <arg name="use_multithread" value="true"/>
        <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
        <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
        <arg name="car_classifier_label_path" value="$(var car_classifier_label_path)"/>
        <arg name="pedestrian_classifier_label_path" value="$(var pedestrian_classifier_label_path)"/>
        <arg name="car_classifier_model_path" value="$(var car_classifier_model_path)"/>
        <arg name="pedestrian_classifier_model_path" value="$(var pedestrian_classifier_model_path)"/>
        <arg name="output/rois" value="$(var output/rois)"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
        <arg name="output/car/traffic_signals" value="$(var output/car/traffic_signals)"/>
        <arg name="output/pedestrian/traffic_signals" value="$(var output/pedestrian/traffic_signals)"/>
      </include>
    </group>

    <group>
      <push-ros-namespace namespace="classification"/>
      <include file="$(find-pkg-share traffic_light_occlusion_predictor)/launch/traffic_light_occlusion_predictor.launch.xml">
        <arg name="input/camera_info" value="$(var input/camera_info)"/>
        <arg name="input/cloud" value="$(var input/cloud)"/>
        <arg name="input/rois" value="$(var output/rois)"/>
        <arg name="input/car/traffic_signals" value="classified/car/traffic_signals"/>
        <arg name="input/pedestrian/traffic_signals" value="classified/pedestrian/traffic_signals"/>
        <arg name="output/traffic_signals" value="$(var output/traffic_signals)"/>
      </include>
    </group>
  </group>


  <!-- traffic_light_multi_camera_fusion -->
  <group>
    <node pkg="traffic_light_multi_camera_fusion" exec="traffic_light_multi_camera_fusion_node" name="traffic_light_multi_camera_fusion" output="screen">
      <param name="camera_namespaces" value="$(var camera_namespaces)"/>
      <param name="perform_group_fusion" value="true"/>
      <remap from="~/input/vector_map" to="/map/vector_map"/>
      <remap from="~/output/traffic_signals" to="$(var fusion/traffic_signals)"/>
    </node>
  </group>

  <!-- crosswalk traffic light estimator -->
  <group if="$(var use_crosswalk_traffic_light_estimator)">
    <node pkg="crosswalk_traffic_light_estimator" exec="crosswalk_traffic_light_estimator_node" name="crosswalk_traffic_light_estimator" output="screen">
      <remap from="~/input/vector_map" to="/map/vector_map"/>
      <remap from="~/input/route" to="/planning/mission_planning/route"/>
      <remap from="~/input/classified/traffic_signals" to="$(var fusion/traffic_signals)"/>
      <remap from="~/output/traffic_signals" to="$(var internal/traffic_signals)"/>
      <param from="$(var crosswalk_traffic_light_estimator_param_file)"/>
    </node>
  </group>

  <group unless="$(var use_crosswalk_traffic_light_estimator)">
    <node pkg="topic_tools" exec="relay" name="fusion_signals_relay" output="screen">
      <param name="input_topic" value="$(var fusion/traffic_signals)"/>
      <param name="output_topic" value="$(var internal/traffic_signals)"/>
      <param name="type" value="autoware_auto_perception_msgs/msg/TrafficSignalArray"/>
    </node>
  </group>

  <!-- V2X fusion -->
  <group>
    <include file="$(find-pkg-share traffic_light_arbiter)/launch/traffic_light_arbiter.launch.xml">
      <arg name="perception_traffic_signals" value="$(var internal/traffic_signals)"/>
      <arg name="external_traffic_signals" value="$(var external/traffic_signals)"/>
      <arg name="output_traffic_signals" value="$(var output/traffic_signals)"/>
    </include>
  </group>
  <!-- visualizer -->
  <group>
    <include file="$(find-pkg-share traffic_light_visualization)/launch/traffic_light_map_visualizer.launch.xml"/>
  </group>
</launch>
